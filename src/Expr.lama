-- Expression evaluator

import List;
import State;

public fun evalBinop(op, eval1, eval2) {
  case op of 
    "+"  -> eval1 + eval2
  | "-"  -> eval1 - eval2
  | "*"  -> eval1 * eval2
  | "/"  -> eval1 / eval2
  | "%"  -> eval1 % eval2
  | ">"  -> eval1 > eval2
  | ">=" -> eval1 >= eval2
  | "<"  -> eval1 < eval2
  | "<=" -> eval1 <= eval2
  | "==" -> eval1 == eval2
  | "!=" -> eval1 != eval2
  | "&&" -> eval1 && eval2
  | "!!" -> eval1 !! eval2
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (x) -> st(x)
  | Const (n) -> n
  | Binop (op, expr1, expr2) -> evalBinop(op, evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}
