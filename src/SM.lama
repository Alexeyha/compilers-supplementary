-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(fun (conf, ins) {
    case ins of
      READ       -> case readWorld(conf[2]) of 
                       [value, w] -> [value : conf[0], conf[1], w]
                    esac

    | WRITE      -> [tl(conf[0]), conf[1], writeWorld(hd(conf[0]), conf[2])]

    | BINOP (op) -> case conf[0] of 
                     (eval2:eval1:rest) -> [evalBinop(op, eval1, eval2):rest, conf[1], conf[2]]
                    esac

    | LD    (x)  -> [conf[1](x) : conf[0], conf[1], conf[2]]

    | ST    (x)  -> [tl(conf[0]), conf[1] <- [x, hd(conf[0])], conf[2]]

    | CONST (n)  -> [n : conf[0], conf[1], conf[2]]
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (v, expr) -> compileExpr(expr) +++ {ST (v)}
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read (v) -> {READ, ST (v)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
