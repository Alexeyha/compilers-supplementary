-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalInsn(env, c@[stack, state, world], ins) {
  case ins of
    READ       -> case readWorld(world) of 
                     [value, w] -> [value : stack, state, w]
                  esac

  | WRITE      -> [tl(stack), state, writeWorld(hd(stack), world)]

  | BINOP (op) -> case stack of 
                   (eval2:eval1:rest) -> [evalBinop(op, eval1, eval2):rest, state, world]
                  esac

  | LD    (x)  -> [state(x) : stack, state, world]

  | ST    (x)  -> [tl(stack), state <- [x, hd(stack)], world]

  | CONST (n)  -> [n : stack, state, world]

  | LABEL (lab) -> c

  | JMP   (lab) -> [c, fromLabel(env, lab)]

  | CJMP  (c, lab) -> case stack of 
      head:rest ->
        if ((compare(c, "nz") == 0 && head != 0) !! (compare(c, "z") == 0 && head == 0)) then 
          [[rest, state, world], fromLabel(env, lab)] 
        else 
          [rest, state, world]
        fi
    esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c 
  | insn:rest -> case evalInsn(env, c, insn) of 
      [conf, next] -> eval(env, conf, next)
    | conf -> eval(env, conf, rest)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (x) -> singletonBuffer(LD (x))
  | Const (n) -> singletonBuffer(CONST (n))
  | Binop (op, expr1, expr2) -> compileExpr(expr1) <+> compileExpr(expr2) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (expr, s) -> 
        case env.genLabels(2) of
          [lab1, lab2, env1] -> case compile(lab1, env1, s) of
            [_, env, newCode] -> [false, env, singletonBuffer(JMP (lab1)) <+ LABEL (lab2) <+> newCode <+ LABEL (lab1) <+> compileExpr(expr) <+ CJMP ("nz", lab2) ]
          esac
        esac
    | If (e, s1, s2) -> case env.genLabel of 
        [lab1, env] -> case compile(lab, env, s1) of
          [_, env, s1Code] -> case compile(lab, env, s2) of
            [_, env, s2Code] -> [true, env, compileExpr(e) <+ CJMP ("z", lab1) <+> s1Code <+ JMP (lab) <+ LABEL (lab1) <+> s2Code]
          esac 
        esac 
      esac 
    | DoWhile (s, expr) -> case env.genLabel of 
        [lab1, env] -> case compile(lab1, env, s) of 
          [lab1Used, env, sCode] -> [lab1Used, env, singletonBuffer(LABEL (lab1)) <+> sCode <+> compileExpr(expr) <+ CJMP ("nz", lab1)]
        esac
      esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
